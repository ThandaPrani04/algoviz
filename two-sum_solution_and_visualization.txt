

--- C++ Solution ---
```cpp
#include <vector>
#include <unordered_map>

using namespace std;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> map;
        for (int i = 0; i < nums.size(); ++i) {
            int complement = target - nums[i];
            if (map.find(complement) != map.end()) {
                return {map[complement], i};
            }
            map[nums[i]] = i;
        }
        return {};
    }
};
```

--- Manim Visualization ---
```python
from manim import *

class TwoSumScene(Scene):
    def construct(self):
        nums = [2, 7, 11, 15]
        target = 9
        elements = VGroup()
        indices = VGroup()
        hash_map = VGroup()
        hash_map_text = VGroup()
        map_title = Text("Hash Map", font_size=24).to_edge(UP).shift(2.5*LEFT)
        self.add(map_title)
        
        # Create array visualization
        for i, num in enumerate(nums):
            square = Square(side_length=1.0, color=WHITE)
            num_text = Text(str(num), font_size=24).move_to(square.get_center())
            idx_text = Text(f"i={i}", font_size=20).next_to(square, DOWN)
            group = VGroup(square, num_text, idx_text)
            if i == 0:
                group.shift(3*LEFT)
            else:
                group.next_to(elements[-1], RIGHT, buff=0)
            elements.add(group)
            indices.add(idx_text)
        
        self.play(Create(elements), Create(indices))
        self.wait(0.5)
        
        current_map = {}
        rect = SurroundingRectangle(map_title).shift(0.2*DOWN + 2.5*LEFT)
        self.play(Create(rect))
        hash_map.add(rect)
        
        found = False
        for i, num in enumerate(nums):
            self.play(Indicate(elements[i]))
            complement = target - num
            comp_text = Text(f"complement = {target} - {num} = {complement}", font_size=24).to_edge(UP)
            self.play(Write(comp_text))
            
            if complement in current_map:
                found = True
                index = current_map[complement]
                comp_rect = SurroundingRectangle(elements[index][1])
                curr_rect = SurroundingRectangle(elements[i][1])
                self.play(Create(comp_rect), Create(curr_rect))
                self.wait(2)
                self.play(FadeOut(comp_text), FadeOut(comp_rect), FadeOut(curr_rect))
                break
            else:
                current_map[num] = i
                key_text = Text(f"{num}", font_size=24).next_to(map_title, DOWN, buff=0.3).shift((len(current_map)-1)*0.6*DOWN + 2*LEFT)
                value_text = Text(f"â†’ {i}", font_size=24).next_to(key_text, RIGHT)
                map_entry = VGroup(key_text, value_text)
                hash_map_text.add(map_entry)
                self.play(FadeIn(map_entry))
                self.wait(0.5)
                self.play(FadeOut(comp_text))
        
        if not found:
            self.play(FadeOut(comp_text))
        
        self.wait(2)
```